[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = ["E501","F401","E711","E712"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F" ]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 100

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "3dLitematica"
authors = [
    {name = "phillychi3", email = "phillychi3@gmail.com"},
    {name = "LegendsOfSky"},
]
description = "A tool can transform Litematica to 3D Obj"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["minecraft", "Litematica"]
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python :: 3",
]
dependencies = [
    "alive_progress",
    "click"
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/MCRTD/3Dlitematica.git"

[project.scripts]
3dLitematica = "t3dlitematica.__main__:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["t3dlitematica*","resource*"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
